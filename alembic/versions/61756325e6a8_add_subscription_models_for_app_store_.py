"""Add subscription models for App Store integration

Revision ID: 61756325e6a8
Revises: 165c09367478
Create Date: 2025-09-21 14:27:57.138200

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '61756325e6a8'
down_revision: Union[str, Sequence[str], None] = '165c09367478'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_store_notifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notification_type', sa.Text(), nullable=False),
    sa.Column('transaction_id', sa.Text(), nullable=True),
    sa.Column('original_transaction_id', sa.Text(), nullable=True),
    sa.Column('product_id', sa.Text(), nullable=False),
    sa.Column('raw_payload', sa.Text(), nullable=False),
    sa.Column('processed', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('processed_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('platform', sa.Enum('APPLE_APP_STORE', 'GOOGLE_PLAY_STORE', name='subscriptionplatform'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'EXPIRED', 'CANCELED', 'GRACE_PERIOD', 'BILLING_RETRY', 'PENDING', name='subscriptionstatus'), nullable=False),
    sa.Column('transaction_id', sa.Text(), nullable=True),
    sa.Column('product_id', sa.Text(), nullable=False),
    sa.Column('receipt_data', sa.Text(), nullable=True),
    sa.Column('purchase_date', sa.TIMESTAMP(), nullable=True),
    sa.Column('expires_date', sa.TIMESTAMP(), nullable=True),
    sa.Column('auto_renew_status', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_validated_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('receipt_validations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_subscription_id', sa.UUID(), nullable=True),
    sa.Column('platform', sa.Enum('APPLE_APP_STORE', 'GOOGLE_PLAY_STORE', name='subscriptionplatform'), nullable=False),
    sa.Column('receipt_data', sa.Text(), nullable=False),
    sa.Column('validation_response', sa.Text(), nullable=True),
    sa.Column('validation_status', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_subscription_id'], ['user_subscriptions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('conversations_user_id_fkey'), 'conversations', type_='foreignkey')
    op.drop_constraint(op.f('conversations_vehicle_id_fkey'), 'conversations', type_='foreignkey')
    op.create_foreign_key(None, 'conversations', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'conversations', 'vehicles', ['vehicle_id'], ['id'], ondelete='CASCADE')
    op.alter_column('messages', 'conversation_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('messages', 'sender',
               existing_type=sa.VARCHAR(length=16),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('mod_documents', 'mod_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('mod_documents', 'uploaded_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('mods_library', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('service_documents', 'service_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('service_reminders', 'vehicle_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=320),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('vehicle_images', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_vehicle_images_created_at'), table_name='vehicle_images')
    op.drop_index(op.f('ix_vehicle_images_vehicle_id'), table_name='vehicle_images')
    op.drop_index(op.f('ux_vehicle_images_primary_per_vehicle'), table_name='vehicle_images', postgresql_where='(is_primary = true)')
    op.alter_column('vehicle_mods', 'vehicle_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('vehicle_mods', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('vehicle_services', 'vehicle_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('vehicles', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('vehicles', 'make',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('vehicles', 'model',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('vehicles', 'year',
               existing_type=sa.INTEGER(),
               type_=sa.Text(),
               nullable=False)
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('vehicles', 'engine')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vehicles', sa.Column('engine', sa.TEXT(), autoincrement=False, nullable=True))
    op.alter_column('vehicles', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('vehicles', 'year',
               existing_type=sa.Text(),
               type_=sa.INTEGER(),
               nullable=True)
    op.alter_column('vehicles', 'model',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('vehicles', 'make',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('vehicles', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('vehicle_services', 'vehicle_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('vehicle_mods', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('vehicle_mods', 'vehicle_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_index(op.f('ux_vehicle_images_primary_per_vehicle'), 'vehicle_images', ['vehicle_id'], unique=True, postgresql_where='(is_primary = true)')
    op.create_index(op.f('ix_vehicle_images_vehicle_id'), 'vehicle_images', ['vehicle_id'], unique=False)
    op.create_index(op.f('ix_vehicle_images_created_at'), 'vehicle_images', ['created_at'], unique=False)
    op.alter_column('vehicle_images', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'email',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=320),
               existing_nullable=False)
    op.alter_column('service_reminders', 'vehicle_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('service_documents', 'service_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('mods_library', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('mod_documents', 'uploaded_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('mod_documents', 'mod_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('messages', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('messages', 'sender',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=16),
               existing_nullable=False)
    op.alter_column('messages', 'conversation_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.create_foreign_key(op.f('conversations_vehicle_id_fkey'), 'conversations', 'vehicles', ['vehicle_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('conversations_user_id_fkey'), 'conversations', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.alter_column('conversations', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_table('receipt_validations')
    op.drop_table('user_subscriptions')
    op.drop_table('app_store_notifications')
    # ### end Alembic commands ###
